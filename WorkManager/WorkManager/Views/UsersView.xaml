<dcont:AsyncUserControl x:Class="WorkManager.Views.UsersView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:dcont="clr-namespace:WPFTools.Windows.Controls;assembly=WPFTools.Presentation"
             xmlns:help="clr-namespace:WPFTools.Helpers;assembly=WPFTools.Presentation"
             xmlns:di="clr-namespace:WPFTools.Inputs;assembly=WPFTools.Presentation"
             xmlns:mEx="clr-namespace:WPFTools.MarkupExtensions;assembly=WPFTools.Presentation"
             xmlns:dconv="clr-namespace:WPFTools.Converters;assembly=WPFTools.Presentation"
             xmlns:cdmod="clr-namespace:WPFTools.Models;assembly=WPFTools.Core"
             xmlns:cdenum="clr-namespace:WPFTools.Enums;assembly=WPFTools.Core"
             xmlns:dcontEx="clr-namespace:WPFTools.Windows.Controls.Extensions;assembly=WPFTools.Presentation"
             xmlns:beh="clr-namespace:WPFTools.Behaviors;assembly=WPFTools.Presentation"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                        xmlns:mod="clr-namespace:WorkManager.Models"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
  <Grid>
    <Grid.Resources>
      <help:BindingProxy x:Key="ProxyContext" Data="{Binding}"/>
    </Grid.Resources>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="3*" MinWidth="300"/>
      <ColumnDefinition Width="auto"/>
      <ColumnDefinition Width="*" MinWidth="400"/>
    </Grid.ColumnDefinitions>
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="auto"/>
      </Grid.RowDefinitions>
      <dcont:AsyncContentControl TaskDescriptor="{Binding UsersLoading}">
        <dcont:FilteringDataGrid CanUserAddRows="False" x:Name="Grid"
                                  CanUserDeleteRows="False"
                                  CanUserResizeRows="False"
                                  AutoGenerateColumns="False"
                                  HeadersVisibility="Column"
                                 FrozenColumnCount="1"
                                  IsReadOnly="True" ExpandedFilter="False" IsFilteringCaseSensitive="False"
                                  ItemsSource="{Binding Users, UpdateSourceTrigger=PropertyChanged}">
          <DataGrid.Resources>
            <help:BindingProxy x:Key="ProxyGrid" Data="{Binding ElementName=Grid}"/>
          </DataGrid.Resources>
          <DataGrid.InputBindings>
            <di:DataGridCopyKeyBinding/>
            <di:DataGridCopyWithHeadersKeyBinding/>
          </DataGrid.InputBindings>
          <DataGrid.RowStyle>
            <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource DataGridRowStyle}">
              <Setter Property="ContextMenu">
                <Setter.Value>
                  <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                    <dcont:DataGridCopyMenuItem AssociatedDataGrid="{Binding Data, Source={StaticResource ProxyGrid}}"/>
                    <dcont:DataGridCopyWithHeadersMenuItem AssociatedDataGrid="{Binding Data, Source={StaticResource ProxyGrid}}"/>
                    <dcont:DataGridColumnsToExportMenuItem AssociatedDataGrid="{Binding Data, Source={StaticResource ProxyGrid}}"/>
                    <Separator/>
                    <MenuItem Header="Usuń trwale" Command="{Binding Data.RemoveUserCommand, Source={StaticResource ProxyContext}}" CommandParameter="{Binding}"
                              IsEnabled="{mEx:BooleanModifyPermission USR}"/>
                    <MenuItem Header="Resetuj hasło" Command="{Binding Data.ChangePasswordCommand, Source={StaticResource ProxyContext}}" CommandParameter="{Binding}">
                      <MenuItem.IsEnabled>
                        <MultiBinding Converter="{dconv:BooleanArrayToBooleanConverter}">
                          <Binding Path="Type" Converter="{dconv:IsEqualConverter}" ConverterParameter="{x:Static cdenum:EFAccountType.Internal}" UpdateSourceTrigger="PropertyChanged" />
                          <Binding Path="Result" Source="{mEx:BooleanModifyPermission USR}"/>
                        </MultiBinding>
                      </MenuItem.IsEnabled>
                    </MenuItem>
                  </ContextMenu>
                </Setter.Value>
              </Setter>
            </Style>
          </DataGrid.RowStyle>
          <dcont:FilteringDataGrid.Columns>
            <DataGridTemplateColumn CanUserResize="False" CanUserReorder="False" dcontEx:ClipboardExport.IsIncluded="False"
                                    CellStyle="{StaticResource DataGridButtonColumnCellStyle}">
              <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                  <Button ToolTip="Edytuj dane użytkownika"
                          Command="{Binding Data.EditUserCommand, Source={StaticResource ProxyContext}}" CommandParameter="{Binding}">
                    <Button.Style>
                      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource DataGridButtonColumnButtonStyle}">
                        <Setter Property="Content">
                          <Setter.Value>
                            <Image Source="pack://application:,,,/Resources/Images/edit_32_2C3E50.png"/>
                          </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                          <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Content">
                              <Setter.Value>
                                <Image Source="pack://application:,,,/Resources/Images/edit_32_FFFFFF.png"/>
                              </Setter.Value>
                            </Setter>
                          </Trigger>
                        </Style.Triggers>
                      </Style>
                    </Button.Style>
                  </Button>
                </DataTemplate>
              </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTextColumn Header="Nazwa użytkownika" Binding="{Binding UserName, UpdateSourceTrigger=PropertyChanged}"/>
            <DataGridTextColumn Header="Imię" Binding="{Binding Name, UpdateSourceTrigger=PropertyChanged}"/>
            <DataGridTextColumn Header="Nazwisko" Binding="{Binding Surname, UpdateSourceTrigger=PropertyChanged}"/>
            <DataGridTextColumn Header="W użyciu" Binding="{Binding InUse, Converter={dconv:BooleanToStringConverter}, UpdateSourceTrigger=PropertyChanged}"/>
          </dcont:FilteringDataGrid.Columns>
        </dcont:FilteringDataGrid>
      </dcont:AsyncContentControl>
      <GroupBox Grid.Row="1" Header="Wyświetl" HorizontalAlignment="Right" Margin="5">
        <StackPanel Orientation="Horizontal"  Margin="5">
          <ComboBox Width="150" DisplayMemberPath="Name" SelectedValuePath="Value"
                  SelectedValue="{Binding InUseFilter, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <cdmod:NamedBool Name="W użyciu" Value="true"/>
            <cdmod:NamedBool Name="Wycofane z użycia" Value="false"/>
            <cdmod:NamedBool Name="Wszystkie" Value="{x:Null}"/>
          </ComboBox>
        </StackPanel>
      </GroupBox>
    </Grid>
    <GridSplitter Grid.Column="1" Margin="0,3"/>
    <Grid Grid.Column="2" Margin="3">
      <dcont:HeaderControl Header="{Binding}" Style="{StaticResource HeaderControlStyle1}">
        <dcont:HeaderControl.HeaderTemplate>
          <DataTemplate >
            <Border BorderBrush="{DynamicResource MainBrush}" BorderThickness="0,0,0,3" Padding="3,3,0,1">
              <Grid IsEnabled="{mEx:BooleanModifyPermission USR}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left"
                           FontSize="14" FontWeight="Bold" Foreground="{DynamicResource MainBrush}">
                  <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                      <Setter Property="Text" Value="Edycja użytkownika"/>
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding EditingUser.EFAccount.TrackingState, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:TrackingState.Added}}" Value="true">
                          <Setter Property="Text" Value="Nowy użytkownik"/>
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
                <Button Grid.Column="1" Padding="10,4" Style="{StaticResource ButtonStyle2}" Command="{Binding NewUserCommand}"
                        IsEnabled="{Binding EditingUser.EFAccount.TrackingState, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter Invert=True}, ConverterParameter={x:Static cdenum:TrackingState.Added}}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="auto"/>
                      <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Path Height="16" Width="16" Data="M 0,0.5 L1,0.5 M0.5,0 L0.5,1" Stretch="Fill" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, UpdateSourceTrigger=PropertyChanged}" StrokeThickness="2"/>
                    <TextBlock Grid.Column="1" Text="NOWY UŻYTKOWNIK" TextAlignment="Center" VerticalAlignment="Center" Margin="5,0,0,0"/>
                  </Grid>
                </Button>
              </Grid>
            </Border>
          </DataTemplate>
        </dcont:HeaderControl.HeaderTemplate>
        <dcont:AsyncContentControl TaskDescriptor="{Binding UserLoading}">
          <ContentControl>
            <ContentControl.Style>
              <Style TargetType="{x:Type ContentControl}">
                <Setter Property="Content">
                  <Setter.Value>
                    <Grid>
                      <Grid.Resources>
                        <mEx:TrackingProvider x:Key="trackingProvider"
                                    TrackingGroup="{Binding Source={StaticResource ProxyContext}, Path=Data.TrackingGroup}" 
                                    TrackingObject="{Binding Source={StaticResource ProxyContext}, Path=Data.EditingUser.EFAccount, UpdateSourceTrigger=PropertyChanged}"/>
                      </Grid.Resources>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="auto"/>
                      </Grid.RowDefinitions>
                      <Grid DataContext="{Binding EditingUser, UpdateSourceTrigger=PropertyChanged}"
                  IsEnabled="{Binding UpdateSourceTrigger=PropertyChanged, Converter={dconv:IsNullConverter NullValue=False}}">
                        <Grid.RowDefinitions>
                          <RowDefinition Height="auto"/>
                          <RowDefinition Height="*"/>
                          <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <Grid>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                          </Grid.RowDefinitions>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                          </Grid.ColumnDefinitions>
                          <dcont:HeaderControl Margin="0,3,3,3" Header="Nazwa użytkownika" Style="{StaticResource HeaderControlStyle4}">
                            <dcont:HeaderControl.HeaderStyle>
                              <Style TargetType="{x:Type ContentControl}" BasedOn="{StaticResource HeaderControlHeaderStyle4}">
                                <Style.Triggers>
                                  <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=UserName, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.Changed}}" Value="true">
                                    <Setter Property="FontWeight" Value="Bold"/>
                                  </DataTrigger>
                                  <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=UserName, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.NotValid}}" Value="true">
                                    <Setter Property="Foreground" Value="Red"/>
                                  </DataTrigger>
                                </Style.Triggers>
                              </Style>
                            </dcont:HeaderControl.HeaderStyle>
                            <TextBox Padding="2" Text="{Binding EFAccount.UserName, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MaxLength="260"
                                     IsEnabled="{mEx:BooleanModifyPermission USR}"/>
                          </dcont:HeaderControl>
                          <dcont:HeaderControl Margin="3,3,0,3" Grid.Column="1" Header="Typ konta" Style="{StaticResource HeaderControlStyle4}">
                            <dcont:HeaderControl.HeaderStyle>
                              <Style TargetType="{x:Type ContentControl}" BasedOn="{StaticResource HeaderControlHeaderStyle4}">
                                <Style.Triggers>
                                  <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=Type, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.Changed}}" Value="true">
                                    <Setter Property="FontWeight" Value="Bold"/>
                                  </DataTrigger>
                                </Style.Triggers>
                              </Style>
                            </dcont:HeaderControl.HeaderStyle>
                            <ComboBox Grid.Column="1" Grid.Row="1"
                                      IsEnabled="{mEx:BooleanModifyPermission USR}"
                                      IsSynchronizedWithCurrentItem="False"
                                      DisplayMemberPath="Name" SelectedValuePath="Value"
                                      SelectedValue="{Binding EFAccount.Type, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                              <cdmod:NamedValue Name="Wewnętrzne" Value="{x:Static cdenum:EFAccountType.Internal}"/>
                            </ComboBox>
                          </dcont:HeaderControl>
                          <ContentControl Grid.Row="1" Grid.ColumnSpan="2">
                            <ContentControl.Style>
                              <Style TargetType="{x:Type ContentControl}">
                                <Setter Property="Content">
                                  <Setter.Value>
                                    <Grid>
                                    </Grid>
                                  </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                  <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                      <Condition Binding="{Binding EFAccount.Type, Converter={dconv:IsEqualConverter}, ConverterParameter={x:Static cdenum:EFAccountType.Internal}, UpdateSourceTrigger=PropertyChanged}" Value="true"/>
                                      <Condition Binding="{Binding EFAccount.TrackingState, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:TrackingState.Added}, UpdateSourceTrigger=PropertyChanged}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Content">
                                      <Setter.Value>
                                        <Grid>
                                          <Grid.RowDefinitions>
                                            <RowDefinition Height="*"/>
                                          </Grid.RowDefinitions>
                                          <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="*"/>
                                          </Grid.ColumnDefinitions>
                                          <dcont:HeaderControl Margin="0,3,3,3" Header="Hasło" Style="{StaticResource HeaderControlStyle4}">
                                            <PasswordBox Padding="2" IsEnabled="{mEx:BooleanModifyPermission USR}">
                                              <i:Interaction.Behaviors>
                                                <beh:PasswordBindingBehavior Password="{Binding EFAccount.Password, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}"
                                                                   ResetPassword="{Binding Data.ResetPassword, Source={StaticResource ProxyContext}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
                                              </i:Interaction.Behaviors>
                                            </PasswordBox>
                                          </dcont:HeaderControl>
                                          <dcont:HeaderControl Margin="3,3,0,3" Grid.Column="1" Header="Powtórz hasło" Style="{StaticResource HeaderControlStyle4}">
                                            <PasswordBox Padding="2" IsEnabled="{mEx:BooleanModifyPermission USR}">
                                              <i:Interaction.Behaviors>
                                                <beh:PasswordBindingBehavior Password="{Binding EFAccount.PasswordConfirm, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}"
                                                                   ResetPassword="{Binding Data.ResetPassword, Source={StaticResource ProxyContext}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
                                              </i:Interaction.Behaviors>
                                            </PasswordBox>
                                          </dcont:HeaderControl>
                                        </Grid>
                                      </Setter.Value>
                                    </Setter>
                                  </MultiDataTrigger>
                                </Style.Triggers>
                              </Style>
                            </ContentControl.Style>
                          </ContentControl>
                          <dcont:HeaderControl Margin="0,3,3,3" Grid.Row="2" Header="Imię" Style="{StaticResource HeaderControlStyle4}">
                            <dcont:HeaderControl.HeaderStyle>
                              <Style TargetType="{x:Type ContentControl}" BasedOn="{StaticResource HeaderControlHeaderStyle4}">
                                <Style.Triggers>
                                  <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=Name, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.Changed}}" Value="true">
                                    <Setter Property="FontWeight" Value="Bold"/>
                                  </DataTrigger>
                                  <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=Name, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.NotValid}}" Value="true">
                                    <Setter Property="Foreground" Value="Red"/>
                                  </DataTrigger>
                                </Style.Triggers>
                              </Style>
                            </dcont:HeaderControl.HeaderStyle>
                            <TextBox Padding="2" Text="{Binding EFAccount.Name, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MaxLength="100"
                                     IsEnabled="{mEx:BooleanModifyPermission USR}"/>
                          </dcont:HeaderControl>
                          <dcont:HeaderControl Margin="3,3,0,3" Grid.Row="2" Grid.Column="1" Header="Nazwisko" Style="{StaticResource HeaderControlStyle4}">
                            <dcont:HeaderControl.HeaderStyle>
                              <Style TargetType="{x:Type ContentControl}" BasedOn="{StaticResource HeaderControlHeaderStyle4}">
                                <Style.Triggers>
                                  <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=Surname, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.Changed}}" Value="true">
                                    <Setter Property="FontWeight" Value="Bold"/>
                                  </DataTrigger>
                                  <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=Surname, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.NotValid}}" Value="true">
                                    <Setter Property="Foreground" Value="Red"/>
                                  </DataTrigger>
                                </Style.Triggers>
                              </Style>
                            </dcont:HeaderControl.HeaderStyle>
                            <TextBox Padding="2" Text="{Binding EFAccount.Surname, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MaxLength="100"
                                     IsEnabled="{mEx:BooleanModifyPermission USR}"/>
                          </dcont:HeaderControl>
                          <dcont:HeaderControl Margin="0,3,3,3" Header="Typ użytkownika" Grid.Row="3" Style="{StaticResource HeaderControlStyle4}" VerticalAlignment="Center">
                            <ComboBox ItemsSource="{Binding Source={x:Static mod:UserType.UserTypes}}" DisplayMemberPath="Name"
                                      SelectedItem="{Binding Data.SelectedUserType, Source={StaticResource ProxyContext}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                      IsEnabled="{mEx:BooleanModifyPermission USR}"/>
                          </dcont:HeaderControl>
                          <Grid Grid.Row="3" Grid.Column="1" VerticalAlignment="Bottom" Margin="3">
                            <Grid.RowDefinitions>
                              <RowDefinition Height="*"/>
                              <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <CheckBox IsChecked="{Binding EFAccount.IsLocked, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Content="Konto zablokowane" Margin="0,0,0,2"
                                      IsEnabled="{mEx:BooleanModifyPermission USR}">
                              <CheckBox.Style>
                                <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                                  <Style.Triggers>
                                    <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=IsLocked, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.Changed}}" Value="true">
                                      <Setter Property="FontWeight" Value="Bold"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=IsLocked, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.NotValid}}" Value="true">
                                      <Setter Property="Foreground" Value="Red"/>
                                    </DataTrigger>
                                  </Style.Triggers>
                                </Style>
                              </CheckBox.Style>
                            </CheckBox>
                            <CheckBox Grid.Row="1" IsChecked="{Binding EFAccount.InUse, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Content="W użyciu"
                                      IsEnabled="{mEx:BooleanModifyPermission USR}">
                              <CheckBox.Style>
                                <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                                  <Style.Triggers>
                                    <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=InUse, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.Changed}}" Value="true">
                                      <Setter Property="FontWeight" Value="Bold"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=InUse, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.NotValid}}" Value="true">
                                      <Setter Property="Foreground" Value="Red"/>
                                    </DataTrigger>
                                  </Style.Triggers>
                                </Style>
                              </CheckBox.Style>
                            </CheckBox>
                          </Grid>
                        </Grid>
                        <GroupBox Grid.Row="1" Header="" Margin="0,3">
                          <GroupBox.HeaderTemplate>
                            <DataTemplate>
                              <TextBlock Text="UPRAWNIENIA" FontSize="10">
                                <TextBlock.Style>
                                  <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="FontWeight" Value="Normal"/>
                                    <Style.Triggers>
                                      <DataTrigger Binding="{Binding Result, Source={mEx:TrackingPropertyState PropertyName=Permissions, Provider={StaticResource trackingProvider}}, UpdateSourceTrigger=PropertyChanged, Converter={dconv:HasFlagConverter}, ConverterParameter={x:Static cdenum:PropertyState.Changed}}" Value="true">
                                        <Setter Property="FontWeight" Value="Bold"/>
                                      </DataTrigger>
                                    </Style.Triggers>
                                  </Style>
                                </TextBlock.Style>
                              </TextBlock>
                            </DataTemplate>
                          </GroupBox.HeaderTemplate>
                          <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                            <ItemsControl ItemsSource="{Binding UserPermissions, UpdateSourceTrigger=PropertyChanged}">
                              <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                  <StackPanel/>
                                </ItemsPanelTemplate>
                              </ItemsControl.ItemsPanel>
                              <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                  <dcont:HeaderControl Header="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource HeaderControlStyle4}" Margin="3">
                                    <ComboBox DisplayMemberPath="Name" SelectedValuePath="Value"
                                  SelectedValue="{Binding Permission, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                              IsEnabled="{mEx:BooleanModifyPermission USR}">
                                      <cdmod:NamedValue Name="Brak" Value="{x:Static cdenum:Permission.None}"/>
                                      <cdmod:NamedValue Name="Odczyt" Value="{x:Static cdenum:Permission.Read}"/>
                                      <cdmod:NamedValue Name="Modyfikacja" Value="{x:Static cdenum:Permission.Modification}"/>
                                    </ComboBox>
                                  </dcont:HeaderControl>
                                </DataTemplate>
                              </ItemsControl.ItemTemplate>
                            </ItemsControl>
                          </ScrollViewer>
                        </GroupBox>
                      </Grid>
                      <Grid Grid.Row="2" Margin="3" HorizontalAlignment="Right">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="*"/>
                          <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Button Content="ANULUJ" Style="{StaticResource ButtonStyle2}" Command="{Binding CancelCommand}"
                                IsEnabled="{mEx:BooleanModifyPermission USR}"/>
                        <Button Grid.Column="1" Content="ZAPISZ" Style="{StaticResource ButtonStyle1}" Command="{Binding SaveCommand}"
                                IsEnabled="{mEx:BooleanModifyPermission USR}"/>
                      </Grid>
                    </Grid>
                  </Setter.Value>
                </Setter>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding EditingUser, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                    <Setter Property="Content">
                      <Setter.Value>
                        <Grid>
                          <TextBlock Text="WYBIERZ KONTO UŻYTKOWNIKA DO EDYCJI" FontSize="13" Margin="10"
                                   FontWeight="Bold" Foreground="{StaticResource MainBrush}"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                      </Setter.Value>
                    </Setter>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ContentControl.Style>
          </ContentControl>
        </dcont:AsyncContentControl>
      </dcont:HeaderControl>
    </Grid>
  </Grid>
</dcont:AsyncUserControl>
